/*
<LICENCE>

Copyright (c) 2008, University of Southampton
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice, this
	list of conditions and the following disclaimer.

 *	Redistributions in binary form must reproduce the above copyright notice,
	this list of conditions and the following disclaimer in the documentation
	and/or other materials provided with the distribution.

 *	Neither the name of the University of Southampton nor the names of its
	contributors may be used to endorse or promote products derived from this
	software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</LICENCE>
 */

package org.qtitools.qti.node.item;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.qtitools.qti.JQTI;
import org.qtitools.qti.attribute.value.BooleanAttribute;
import org.qtitools.qti.attribute.value.StringAttribute;
import org.qtitools.qti.group.item.ItemBodyGroup;
import org.qtitools.qti.group.item.ModalFeedbackGroup;
import org.qtitools.qti.group.item.StylesheetGroup;
import org.qtitools.qti.group.item.response.declaration.ResponseDeclarationGroup;
import org.qtitools.qti.group.item.response.processing.ResponseProcessingGroup;
import org.qtitools.qti.group.item.template.declaration.TemplateDeclarationGroup;
import org.qtitools.qti.group.item.template.processing.TemplateProcessingGroup;
import org.qtitools.qti.group.outcome.declaration.OutcomeDeclarationGroup;
import org.qtitools.qti.node.UniqueObject;
import org.qtitools.qti.node.content.ItemBody;
import org.qtitools.qti.node.item.interaction.Interaction;
import org.qtitools.qti.node.item.response.declaration.ResponseDeclaration;
import org.qtitools.qti.node.item.response.processing.ResponseProcessing;
import org.qtitools.qti.node.item.template.declaration.TemplateDeclaration;
import org.qtitools.qti.node.item.template.processing.TemplateProcessing;
import org.qtitools.qti.node.outcome.declaration.OutcomeDeclaration;
import org.qtitools.qti.node.shared.FieldValue;
import org.qtitools.qti.node.shared.declaration.DefaultValue;
import org.qtitools.qti.node.test.TemplateDefault;
import org.qtitools.qti.value.BaseType;
import org.qtitools.qti.value.Cardinality;
import org.qtitools.qti.value.FloatValue;
import org.qtitools.qti.value.IdentifierValue;
import org.qtitools.qti.value.IntegerValue;
import org.qtitools.qti.value.StringValue;
import org.qtitools.qti.value.Value;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * AssessmentItem encompasses the information that is presented to A candidate and information about how to score the item.
 * Scoring takes place when candidate responses are transformed into outcomes by response processing rules. It is sometimes
 * desirable to have several different items that appear the same to the candidate but which are scored differently.
 * In this specification, these are distinct items by definition and must therefore have distinct identifiers.
 *
 * @author Jonathon Hare
 * @author Jiri Kajaba
 */
public class AssessmentItem extends UniqueObject
{
	private static final long serialVersionUID = 1L;

	/** logger. */
	protected static Logger logger = LoggerFactory.getLogger(AssessmentItem.class);

	/** Name of this class in xml schema. */
	public static final String CLASS_TAG = "assessmentItem";

	/** Header of xml file. */
	public static final String XML = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";

	/** Name of xmlns attribute in xml schema. */
	public static final String ATTR_DEFAULT_NAME_SPACE_NAME = "xmlns";
	/** Value of xmlns attribute. */
	public static final String ATTR_DEFAULT_NAME_SPACE_VALUE = "http://www.imsglobal.org/xsd/imsqti_v2p1";

	/** Name of xmlns:xsi attribute in xml schema. */
	public static final String ATTR_XSI_NAME_SPACE_NAME = "xmlns:xsi";
	/** Value of xmlns:xsi attribute. */
	public static final String ATTR_XSI_NAME_SPACE_VALUE = "http://www.w3.org/2001/XMLSchema-instance";

	/** Name of xsi:schemaLocation attribute in xml schema. */
	public static final String ATTR_XSI_SCHEMA_LOCATION_NAME = "xsi:schemaLocation";
	/** Value of xsi:schemaLocation attribute. */
	public static final String ATTR_XSI_SCHEMA_LOCATION_VALUE = "http://www.imsglobal.org/xsd/imsqti_v2p1 imsqti_v2p1.xsd";

	/** Name of title attribute in xml schema. */
	public static final String ATTR_TITLE_NAME = "title";

	/** Name of label attribute in xml schema. */
	public static final String ATTR_LABEL_NAME = "label";
	/** Default value of label attribute. */
	public static final String ATTR_LABEL_DEFAULT_VALUE = null;

	/** Name of lang attribute in xml schema. */
	public static final String ATTR_LANG_NAME = "lang";
	/** Default value of lang attribute. */
	public static final String ATTR_LANG_DEFAULT_VALUE = null;

	/** Name of adaptive attribute in xml schema. */
	public static final String ATTR_ADAPTIVE_NAME = "adaptive";

	/** Name of timeDependant attribute in xml schema. */
	public static final String ATTR_TIME_DEPENDENT_NAME = "timeDependent";

	/** Name of toolName attribute in xml schema. */
	public static final String ATTR_TOOL_NAME_NAME = "toolName";
	/** Default value of toolName attribute. */
	public static final String ATTR_TOOL_NAME_DEFAULT_VALUE = null;

	/** Name of toolVersion attribute in xml schema. */
	public static final String ATTR_TOOL_VERSION_NAME = "toolVersion";
	/** Default value of toolVersion attribute. */
	public static final String ATTR_TOOL_VERSION_DEFAULT_VALUE = null;

	/** Name of completion status built-in variable. */
	public static final String VARIABLE_COMPLETION_STATUS = "completionStatus";

	/** Value of completion status built-in variable. */
	public static final String VALUE_ITEM_IS_NOT_ATTEMPTED = "not_attempted";

	/** Value of completion status built-in variable. */
	public static final String VALUE_ITEM_IS_UNKNOWN = "unknown";

	/** Value of completion status built-in variable. */
	public static final String VALUE_ITEM_IS_COMPLETED = "completed";

	/** Name of number of attempts built-in variable. */
	public static final String VARIABLE_NUMBER_OF_ATTEMPTS = "numAttempts";

	/** Name of duration built-in variable. */
	public static final String VARIABLE_DURATION_NAME = "duration";

	private OutcomeDeclaration completionStatusOutcome;
	private ResponseDeclaration numAttemptsResponse;
	private ResponseDeclaration durationResponse;

	private ItemTimeRecord timeRecord;

	private boolean isInitialized = false;

	/**
	 * Constructs assessmentItem.
	 */
	public AssessmentItem()
	{
		super(null); // Item doesn't have any parent.

		getAttributes().add(0, new StringAttribute(this, ATTR_DEFAULT_NAME_SPACE_NAME, ATTR_DEFAULT_NAME_SPACE_VALUE, null, true));
		getAttributes().add(1, new StringAttribute(this, ATTR_XSI_NAME_SPACE_NAME, ATTR_XSI_NAME_SPACE_VALUE, null, true));
		getAttributes().add(2, new StringAttribute(this, ATTR_XSI_SCHEMA_LOCATION_NAME, ATTR_XSI_SCHEMA_LOCATION_VALUE, null, true));

		getAttributes().add(new StringAttribute(this, ATTR_TITLE_NAME));
		getAttributes().add(new StringAttribute(this, ATTR_LABEL_NAME, ATTR_LABEL_DEFAULT_VALUE));
		getAttributes().add(new StringAttribute(this, ATTR_LANG_NAME, ATTR_LANG_DEFAULT_VALUE));
		getAttributes().add(new BooleanAttribute(this, ATTR_ADAPTIVE_NAME));
		getAttributes().add(new BooleanAttribute(this, ATTR_TIME_DEPENDENT_NAME));
		getAttributes().add(new StringAttribute(this, ATTR_TOOL_NAME_NAME, ATTR_TOOL_NAME_DEFAULT_VALUE));
		getAttributes().add(new StringAttribute(this, ATTR_TOOL_VERSION_NAME, ATTR_TOOL_VERSION_DEFAULT_VALUE));

		getNodeGroups().add(new ResponseDeclarationGroup(this));
		getNodeGroups().add(new OutcomeDeclarationGroup(this));
		getNodeGroups().add(new TemplateDeclarationGroup(this));

		getNodeGroups().add(new TemplateProcessingGroup(this)); // templateProcessing [0..1]
		getNodeGroups().add(new StylesheetGroup(this)); 		// stylesheet [0..*]
		getNodeGroups().add(new ItemBodyGroup(this)); 			// itemBody [0..1]
		getNodeGroups().add(new ResponseProcessingGroup(this)); // responseProcessing [0..1]
		getNodeGroups().add(new ModalFeedbackGroup(this)); 		// modalFeedback [*]

		//create a special declaration for the internal completionStatus variable
		completionStatusOutcome = new OutcomeDeclaration(this);
		completionStatusOutcome.setIdentifier(VARIABLE_COMPLETION_STATUS);
		completionStatusOutcome.setCardinality(Cardinality.SINGLE);
		completionStatusOutcome.setBaseType(BaseType.IDENTIFIER);
		completionStatusOutcome.setValue(new IdentifierValue(VALUE_ITEM_IS_NOT_ATTEMPTED));

		//create a special declaration for the internal numAttempts variable
		numAttemptsResponse = new ResponseDeclaration(this);
		numAttemptsResponse.setIdentifier(VARIABLE_NUMBER_OF_ATTEMPTS);
		numAttemptsResponse.setCardinality(Cardinality.SINGLE);
		numAttemptsResponse.setBaseType(BaseType.INTEGER);
		numAttemptsResponse.setValue(new IntegerValue(0));

		//create a special declaration for the internal duration variable
		durationResponse = new ResponseDeclaration(this);
		durationResponse.setIdentifier(VARIABLE_DURATION_NAME);
		durationResponse.setCardinality(Cardinality.SINGLE);
		durationResponse.setBaseType(BaseType.FLOAT);
		durationResponse.setValue(new FloatValue(0));
	}

	/**
	 * Convenience constructor for assessmentItem.
	 * Sets the JQTI toolName and toolVersion automatically.
	 *
	 * @param identifier Value of the identifier attribute.
	 * @param title Value of the title attribute.
	 * @param adaptive Value of the adaptive attribute.
	 * @param timeDependent Value of the timeDependent attribute.
	 */
	public AssessmentItem(String identifier, String title, boolean adaptive, boolean timeDependent) {
		this();

		setIdentifier(identifier);
		setTitle(title);
		setAdaptive(adaptive);
		setTimeDependent(timeDependent);

		setToolName(JQTI.TOOL_NAME);
		setToolVersion(JQTI.TOOL_VERSION);
	}

	/**
	 * Gets time record of this item.
	 *
	 * @return time record of this item
	 */
	public ItemTimeRecord getTimeRecord() {
		return timeRecord;
	}

	private long getDuration() {
		return timeRecord.getDuration();
	}

	/**
	 * Sets time record of this item.
	 *
	 * @param timeRecord timeRecord to set
	 */
	public void setTimeRecord(ItemTimeRecord timeRecord) {
		this.timeRecord = timeRecord;
	}

	@Override
	public String getClassTag()
	{
		return CLASS_TAG;
	}

	/**
	 * Gets value of title attribute.
	 *
	 * @return value of title attribute
	 * @see #setTitle
	 */
	public String getTitle()
	{
		return getAttributes().getStringAttribute(ATTR_TITLE_NAME).getValue();
	}

	/**
	 * Sets new value of title attribute.
	 *
	 * @param title new value of title attribute
	 * @see #getTitle
	 */
	public void setTitle(String title)
	{
		getAttributes().getStringAttribute(ATTR_TITLE_NAME).setValue(title);
	}

	/**
	 * Gets value of label attribute.
	 *
	 * @return value of label attribute
	 * @see #setLabel
	 */
	public String getLabel()
	{
		return getAttributes().getStringAttribute(ATTR_LABEL_NAME).getValue();
	}

	/**
	 * Sets new value of label attribute.
	 *
	 * @param label new value of label attribute
	 * @see #getLabel
	 */
	public void setLabel(String label)
	{
		getAttributes().getStringAttribute(ATTR_LABEL_NAME).setValue(label);
	}

	/**
	 * Gets value of lang attribute.
	 *
	 * @return value of lang attribute
	 * @see #setLang
	 */
	public String getLang()
	{
		return getAttributes().getStringAttribute(ATTR_LANG_NAME).getValue();
	}

	/**
	 * Sets new value of lang attribute.
	 *
	 * @param lang new value of lang attribute
	 * @see #getLang
	 */
	public void setLang(String lang)
	{
		getAttributes().getStringAttribute(ATTR_LANG_NAME).setValue(lang);
	}

	/**
	 * Gets value of adaptive attribute.
	 *
	 * @return value of adaptive attribute
	 * @see #setAdaptive
	 */
	public Boolean getAdaptive()
	{
		return getAttributes().getBooleanAttribute(ATTR_ADAPTIVE_NAME).getValue();
	}

	/**
	 * Sets new value of adaptive attribute.
	 *
	 * @param adaptive new value of adaptive attribute
	 * @see #getAdaptive
	 */
	public void setAdaptive(Boolean adaptive)
	{
		getAttributes().getBooleanAttribute(ATTR_ADAPTIVE_NAME).setValue(adaptive);
	}

	/**
	 * Gets value of timeDependent attribute.
	 *
	 * @return value of timeDependent attribute
	 * @see #setTimeDependent
	 */
	public Boolean getTimeDependent()
	{
		return getAttributes().getBooleanAttribute(ATTR_TIME_DEPENDENT_NAME).getValue();
	}

	/**
	 * Sets new value of timeDependent attribute.
	 *
	 * @param timeDependent new value of timeDependent attribute
	 * @see #getTimeDependent
	 */
	public void setTimeDependent(Boolean timeDependent)
	{
		getAttributes().getBooleanAttribute(ATTR_TIME_DEPENDENT_NAME).setValue(timeDependent);
	}

	/**
	 * Gets value of toolName attribute.
	 *
	 * @return value of toolName attribute
	 * @see #setToolName
	 */
	public String getToolName()
	{
		return getAttributes().getStringAttribute(ATTR_TOOL_NAME_NAME).getValue();
	}

	/**
	 * Sets new value of toolName attribute.
	 *
	 * @param toolName new value of toolName attribute
	 * @see #getToolName
	 */
	public void setToolName(String toolName)
	{
		getAttributes().getStringAttribute(ATTR_TOOL_NAME_NAME).setValue(toolName);
	}

	/**
	 * Gets value of toolVersion attribute.
	 *
	 * @return value of toolVersion attribute
	 * @see #setToolVersion
	 */
	public String getToolVersion()
	{
		return getAttributes().getStringAttribute(ATTR_TOOL_VERSION_NAME).getValue();
	}

	/**
	 * Sets new value of toolVersion attribute.
	 *
	 * @param toolVersion new value of toolVersion attribute
	 * @see #getToolVersion
	 */
	public void setToolVersion(String toolVersion)
	{
		getAttributes().getStringAttribute(ATTR_TOOL_VERSION_NAME).setValue(toolVersion);
	}

	/**
	 * Gets stylesheet children.
	 *
	 * @return stylesheet children
	 */
	public List<Stylesheet> getStylesheets()
	{
		return getNodeGroups().getStylesheetGroup().getStylesheets();
	}

	/**
	 * Gets modalFeedback children.
	 *
	 * @return modalFeedback children
	 */
	public List<ModalFeedback> getModalFeedbacks()
	{
		return getNodeGroups().getModalFeedbackGroup().getModalFeedback();
	}

	/**
	 * Gets outcomeDeclaration children.
	 *
	 * @return outcomeDeclaration children
	 */
	public List<OutcomeDeclaration> getOutcomeDeclarations()
	{
		return getNodeGroups().getOutcomeDeclarationGroup().getOutcomeDeclarations();
	}

	/**
	 * Gets outcomeDeclaration with given identifier or null.
	 *
	 * @param identifier given identifier
	 * @return outcomeDeclaration with given identifier or null
	 */
	public OutcomeDeclaration getOutcomeDeclaration(String identifier)
	{
		if (identifier == null) return null;

		if (identifier.equals(VARIABLE_COMPLETION_STATUS))
			return completionStatusOutcome;

		for (OutcomeDeclaration declaration : getOutcomeDeclarations())
			if (declaration.getIdentifier() != null && declaration.getIdentifier().equals(identifier))
				return declaration;

		return null;
	}

	/**
	 * IMPORTANT : This method is patched to assign completionStatus correctly to IdentifierValue type
	 * Set the completionStatus to the given value.
	 * @param completionStatus value to set
	 */
	public void setCompletionStatus(String completionStatus) {
		completionStatusOutcome.setValue(new IdentifierValue(completionStatus));
	}

	/**
	 * Gets responseDeclaration children.
	 *
	 * @return responseDeclaration children
	 */
	public List<ResponseDeclaration> getResponseDeclarations()
	{
		return getNodeGroups().getResponseDeclarationGroup().getResponseDeclarations();
	}

	/**
	 * Gets responseDeclaration with given identifier or null.
	 *
	 * @param identifier given identifier
	 * @return responseDeclaration with given identifier or null
	 */
	public ResponseDeclaration getResponseDeclaration(String identifier)
	{
		if (identifier == null) return null;

		if (identifier.equals(VARIABLE_NUMBER_OF_ATTEMPTS))
			return numAttemptsResponse;

		if (timeRecord != null && identifier.equals(VARIABLE_DURATION_NAME)) {
			durationResponse.setValue(new FloatValue(getDuration() / 1000.0));
			return durationResponse;
		}

		for (ResponseDeclaration declaration : getResponseDeclarations())
			if (declaration.getIdentifier() != null && declaration.getIdentifier().equals(identifier))
				return declaration;

		return null;
	}

	/**
	 * Gets templateDeclaration children.
	 *
	 * @return templateDeclaration children
	 */
	public List<TemplateDeclaration> getTemplateDeclarations()
	{
		return getNodeGroups().getTemplateDeclarationGroup().getTemplateDeclarations();
	}

	/**
	 * Gets templateDeclaration with given identifier or null.
	 *
	 * @param identifier given identifier
	 * @return templateDeclaration with given identifier or null
	 */
	public TemplateDeclaration getTemplateDeclaration(String identifier)
	{
		for (TemplateDeclaration declaration : getTemplateDeclarations())
			if (declaration.getIdentifier() != null && declaration.getIdentifier().equals(identifier))
				return declaration;

		return null;
	}

	/**
	 * Gets templateProcessing child.
	 *
	 * @return templateProcessing child
	 * @see #setTemplateProcessing
	 */
	public TemplateProcessing getTemplateProcessing()
	{
		return getNodeGroups().getTemplateProcessingGroup().getTemplateProcessing();
	}

	/**
	 * Sets new templateProcessing child.
	 *
	 * @param templateProcessing new templateProcessing child
	 * @see #getTemplateProcessing
	 */
	public void setTemplateProcessing(TemplateProcessing templateProcessing)
	{
		getNodeGroups().getTemplateProcessingGroup().setTemplateProcessing(templateProcessing);
	}

	/**
	 * Gets responseProcessing child.
	 *
	 * @return templateProcessing child
	 * @see #setTemplateProcessing
	 */
	public ResponseProcessing getResponseProcessing()
	{
		return getNodeGroups().getResponseProcessingGroup().getResponseProcessing();
	}

	/**
	 * Sets new responseProcessing child.
	 *
	 * @param responseProcessing new responseProcessing child
	 * @see #getResponseProcessing
	 */
	public void setResponseProcessing(ResponseProcessing responseProcessing)
	{
		getNodeGroups().getResponseProcessingGroup().setResponseProcessing(responseProcessing);
	}

	/**
	 * Gets itemBody child.
	 *
	 * @return itemBody child
	 * @see #setItemBody
	 */
	public ItemBody getItemBody() {
		return getNodeGroups().getItemBodyGroup().getItemBody();
	}

	/**
	 * Sets new itemBody child.
	 *
	 * @param itemBody new itemBody child
	 * @see #getItemBody
	 */
	public void setItemBody(ItemBody itemBody)
	{
		getNodeGroups().getItemBodyGroup().setItemBody(itemBody);
	}

	@Override
	public String toXmlString(int depth, boolean printDefaultAttributes)
	{
		StringBuilder builder = new StringBuilder();

		builder.append(XML);
		builder.append(NEW_LINE);
		builder.append(super.toXmlString(depth, printDefaultAttributes));

		return builder.toString();
	}

	/**
	 * Gets A template or outcome variable with given identifier or null
	 *
	 * @param identifier given identifier
	 * @return value of templateDeclaration or outcomeDeclaration with given identifier or null
	 */
	public Value getValue(String identifier) {
		Value value = getTemplateValue(identifier);

		if (value != null) return value;

		return getOutcomeValue(identifier);
	}

	/**
	 * Gets A response variable with given identifier or null
	 *
	 * @param identifier given identifier
	 * @return value of responseDeclaration with given identifier or null
	 */
	public Value getResponseValue(String identifier) {
		ResponseDeclaration declaration = getResponseDeclaration(identifier);

		return (declaration != null) ? declaration.getValue() : null;
	}

	/**
	 * Gets value of templateDeclaration with given identifier or null.
	 *
	 * @param identifier given identifier
	 * @return value of templateDeclaration with given identifier or null
	 */
	public Value getTemplateValue(String identifier)
	{
		TemplateDeclaration declaration = getTemplateDeclaration(identifier);

		return (declaration != null) ? declaration.getValue() : null;
	}

	/**
	 * Gets value of outcomeDeclaration with given identifier or null.
	 *
	 * @param identifier given identifier
	 * @return value of outcomeDeclaration with given identifier or null
	 */
	public Value getOutcomeValue(String identifier)
	{
		OutcomeDeclaration declaration = getOutcomeDeclaration(identifier);

		return (declaration != null) ? declaration.getValue() : null;
	}


	/**
	 * Initialize the item by setting the template defaults, resetting variables,
	 * and performing templateProcessing
	 *
	 * An item should only be initialized if it is going to be rendered/presented
	 *
	 * @param templateDefaults given templateDefaults values
	 */
	public void initialize(List<TemplateDefault> templateDefaults)
	{
		// Initialises templateDeclaration's defaults with any externally provided defaults.
		initializeTemplateDefaults(templateDefaults);

		// Initialises templateDeclaration's values.
		for (TemplateDeclaration templateDeclaration : getTemplateDeclarations())
			templateDeclaration.resetValue();

		// Perform templateProcessing.
		TemplateProcessing templateProcessing = getTemplateProcessing();
		if (templateProcessing != null)
			templateProcessing.evaluate();

		//normally you would only initialize a given item once
		//if you do try and do it again, we explicitly keep the outcome and response
		//state, however new template values are permitted...
		if (!isInitialized) {
			// Initialises outcomeDeclaration's values.
			for (OutcomeDeclaration outcomeDeclaration : getOutcomeDeclarations())
				outcomeDeclaration.resetValue();

			// Initialises responseDeclaration's values.
			for (ResponseDeclaration responseDeclaration : getResponseDeclarations())
				responseDeclaration.resetValue();

			// Initialize response processing templates if required
			ResponseProcessing responseProcessing = getResponseProcessing();
			if (responseProcessing != null)
				responseProcessing.initialize();
		}

		// Set the completion status to unknown
		setCompletionStatus(AssessmentItem.VALUE_ITEM_IS_UNKNOWN);

		// Initialize any interactions in the itemBody
		getItemBody().initialize();

		isInitialized = true;
	}

	private void initializeTemplateDefaults(List<TemplateDefault> templateDefaults) {
		if (templateDefaults != null)
		{
			for (TemplateDefault templateDefault : templateDefaults) {
				TemplateDeclaration declaration = getTemplateDeclaration(templateDefault.getTemplateIdentifier());

				if (declaration != null) {
					DefaultValue defaultValue = declaration.getDefaultValue();

					if (defaultValue == null) {
						defaultValue = new DefaultValue(declaration);
					}

					templateDefault.evaluate();

					List<FieldValue> fieldValues = FieldValue.getValues(defaultValue, templateDefault.getValue());
					defaultValue.getFieldValues().clear();
					defaultValue.getFieldValues().addAll(fieldValues);

					declaration.setDefaultValue(defaultValue);
				}
			}
		}
	}

	/**
	 * Set the responses for this assessmentItem.
	 * The provided responses must be in the form responseIdentifier -> List of responses.
	 * If A given response is A singleValue, then the list will only have one element.
	 *
	 * Record cardinality responses are not supported!
	 *
	 * @param responses Responses to set.
	 */
	public void setResponses(Map<String, List<String>> responses) {
		for (Interaction interaction : getItemBody().getInteractions())
			interaction.beforeProcessResponse();

		for (String responseIdentifier : responses.keySet()) {
			Interaction interaction = getItemBody().getInteraction(responseIdentifier);

			if (interaction != null)
			{
				interaction.processResponse(responses.get(responseIdentifier));
			} else {
				logger.warn("setResponses couldn't find interaction for identifier " +responseIdentifier);
			}
		}
	}

	/**
	 * Process the responses
	 */
	public void processResponses() {
		int oldAttempts = ((IntegerValue)numAttemptsResponse.getValue()).intValue();
		numAttemptsResponse.setValue(new IntegerValue(oldAttempts + 1));

		ResponseProcessing responseProcessing = getResponseProcessing();

		if (responseProcessing != null)
			responseProcessing.evaluate();
	}

	/**
	 * Returns an unmodifiable map of outcome identifiers to outcome values.
	 *
	 * @return Unmodifiable map of outcome values.
	 */
	public Map<String, Value> getOutcomeValues() {
		List<OutcomeDeclaration> declarations = getOutcomeDeclarations();
		Map<String, Value> values = new HashMap<String, Value>();

		for (OutcomeDeclaration declaration : declarations) {
			values.put(declaration.getIdentifier(), declaration.getValue());
		}

		values.put(completionStatusOutcome.getIdentifier(), completionStatusOutcome.getValue());

		return Collections.unmodifiableMap(values);
	}

	/**
	 * Returns an unmodifiable map of template identifiers to template values.
	 *
	 * @return Unmodifiable map of template values.
	 */
	public Map<String, Value> getTemplateValues() {
		List<TemplateDeclaration> declarations = getTemplateDeclarations();
		Map<String, Value> values = new HashMap<String, Value>();

		for (TemplateDeclaration declaration : declarations) {
			values.put(declaration.getIdentifier(), declaration.getValue());
		}

		return Collections.unmodifiableMap(values);
	}

	/**
	 * Returns an unmodifiable map of response identifiers to response values.
	 *
	 * @return Unmodifiable map of response values.
	 */
	public Map<String, Value> getResponseValues() {
		List<ResponseDeclaration> declarations = getResponseDeclarations();
		Map<String, Value> values = new HashMap<String, Value>();

		for (ResponseDeclaration declaration : declarations) {
			values.put(declaration.getIdentifier(), declaration.getValue());
		}

		values.put(numAttemptsResponse.getIdentifier(), numAttemptsResponse.getValue());

		if (timeRecord != null) {
			durationResponse.setValue(new FloatValue(getDuration() / 1000.0));
			values.put(durationResponse.getIdentifier(), durationResponse.getValue());
		}

		return Collections.unmodifiableMap(values);
	}

	/**
	 * Validate the responses set for each of the interactions
	 * @return false if any interaction doesn't validate, true otherwise.
	 */
	public boolean validateResponses() {
		for (Interaction interaction : getItemBody().getInteractions()) {
			if (interaction.validateResponse() == false) return false;
		}
		return true;
	}

	/**
	 * IMPORTANT : This method is patched to handle adaptive items correctly
	 * Returns true if this item reference was correctly responded;
	 * Correctly responded means ALL defined responseVars match their associated correctResponse.
	 * Returns null if any of the responseDeclarations don't have  correctResponses.
	 *
	 * @return true if this item reference was correctly responded; null if not all
	 * responseDeclarations contain correctResponses; false otherwise
	 * @see #isIncorrect
	 */
	public Boolean isCorrect()
	{
		if (getAdaptive()){
			IdentifierValue completionStatus = (IdentifierValue) getOutcomeValue(AssessmentItem.VARIABLE_COMPLETION_STATUS);
			if (completionStatus != null && completionStatus.stringValue().equals(AssessmentItem.VALUE_ITEM_IS_COMPLETED)){
				return true;
			}else{
				return false;
			}
		}
		else{

			for (ResponseDeclaration responseDeclaration : getResponseDeclarations())
				if (responseDeclaration.getCorrectResponse() == null)
					return false;

			for (ResponseDeclaration responseDeclaration : getResponseDeclarations()) {
				if (!responseDeclaration.isCorrectResponse()) {
					return false;
				}
			}
			return true;
		}
	}

	/**
	 * Returns the number of correct responses
	 *
	 * @return the number of correct responses
	 * @see #countIncorrect
	 */
	public int countCorrect()
	{
		int count = 0;

		for (ResponseDeclaration responseDeclaration : getResponseDeclarations()) {
			if (responseDeclaration.isCorrectResponse() == Boolean.TRUE) {
				count++;
			}
		}

		return count;
	}

	/**
	 * IMPORTANT : This method is patched to handle adaptive items correctly
	 * Returns true if this item reference was incorrectly responded;
	 * Incorrectly responded means ANY defined responseVars didn't match their
	 * associated correctResponse.
	 *
	 * Returns null if any of the responseDeclarations don't have correctResponses.
	 *
	 * @return true if this item reference was incorrectly responded; null if not all
	 * responseDeclarations contain correctResponses; false otherwise
	 * @see #isCorrect
	 */
	public Boolean isIncorrect()
	{
		if (getAdaptive()){
			IdentifierValue completionStatus = (IdentifierValue) getOutcomeValue(AssessmentItem.VARIABLE_COMPLETION_STATUS);
			if (!completionStatus.stringValue().equals(AssessmentItem.VALUE_ITEM_IS_COMPLETED)){
				return true;
			}else{
				return false;
			}
		}else{
			for (ResponseDeclaration responseDeclaration : getResponseDeclarations())
				if (responseDeclaration.getCorrectResponse() == null)
					return true;

			for (ResponseDeclaration responseDeclaration : getResponseDeclarations()) {
				if (!responseDeclaration.isCorrectResponse()) {
					return true;
				}
			}
			return false;
		}
	}

	/**
	 * Returns the number of incorrect responses
	 *
	 * @return the number of incorrect responses
	 * @see #countIncorrect
	 */
	public int countIncorrect()
	{
		int count = 0;

		for (ResponseDeclaration responseDeclaration : getResponseDeclarations()) {
			if (responseDeclaration.isCorrectResponse() == Boolean.FALSE) {
				count++;
			}
		}

		return count;
	}
}
